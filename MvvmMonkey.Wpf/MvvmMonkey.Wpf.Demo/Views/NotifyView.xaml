<UserControl x:Class="NirDobovizki.MvvmMonkey.Wpf.Demo.Views.NotifyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.ColumnSpan="2" TextWrapping="Wrap" FontSize="17">The PropertyChange class takes out the OnPropertyChanged boilerplate function
        without forcing you to inherit from a view model base class</TextBlock>
        <Border Padding="3" BorderThickness="1" BorderBrush="Gray" Grid.Row="1">
            <TextBlock >View Model</TextBlock>
        </Border>
        <Border Padding="3" BorderThickness="1" BorderBrush="Gray" Grid.Row="2" >
            <TextBlock TextWrapping="Wrap" FontFamily="Consolas" xml:space="preserve">
public event PropertyChangedEventHandler PropertyChanged;

private object _child;
public object Child
{
    get { return _child; }
    set
    {
        if(_child!=value)
        {
            _child = value;
            <Run Foreground="red">PropertyChange.Notify(this, PropertyChanged);</Run>
        }
    }
}

            </TextBlock>
        </Border>
        <TextBlock Grid.Row="3" Grid.ColumnSpan="2" TextWrapping="Wrap">
            This solves just a small part of the INotifyPropertyChanged boiler plate code, it seems to be that's all
            that can be solved at the moment without modifing the IL with tools like PostSharp or Fody
        </TextBlock>
    </Grid>
</UserControl>
